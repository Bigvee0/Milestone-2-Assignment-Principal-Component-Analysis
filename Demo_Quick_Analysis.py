{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "025f53b4-190d-4bd5-bc70-be387c0b173c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "\"\"\"\n",
    "Quick Demo Script - Cancer Dataset PCA Analysis\n",
    "Anderson Cancer Center - Donor Funding Model\n",
    "\n",
    "This script provides a quick demonstration of the key analysis components.\n",
    "Run this for a fast overview before using the full analysis script.\n",
    "\"\"\"\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "def quick_demo():\n",
    "    \"\"\"Quick demonstration of PCA analysis\"\"\"\n",
    "    \n",
    "    print(\"üè• ANDERSON CANCER CENTER - QUICK PCA DEMO\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    # 1. Load Data\n",
    "    print(\"üìä Loading breast cancer dataset...\")\n",
    "    data = load_breast_cancer()\n",
    "    X, y = data.data, data.target\n",
    "    print(f\"‚úì Dataset loaded: {X.shape[0]} samples, {X.shape[1]} features\")\n",
    "    \n",
    "    # 2. Standardize Features\n",
    "    print(\"\\nüîß Standardizing features...\")\n",
    "    scaler = StandardScaler()\n",
    "    X_scaled = scaler.fit_transform(X)\n",
    "    print(\"‚úì Features standardized\")\n",
    "    \n",
    "    # 3. Apply PCA\n",
    "    print(\"\\nüßÆ Applying PCA (reducing to 2 components)...\")\n",
    "    pca = PCA(n_components=2)\n",
    "    X_pca = pca.fit_transform(X_scaled)\n",
    "    \n",
    "    variance_explained = pca.explained_variance_ratio_\n",
    "    total_variance = sum(variance_explained)\n",
    "    \n",
    "    print(f\"‚úì PCA completed:\")\n",
    "    print(f\"  - PC1 variance: {variance_explained[0]:.1%}\")\n",
    "    print(f\"  - PC2 variance: {variance_explained[1]:.1%}\")\n",
    "    print(f\"  - Total variance explained: {total_variance:.1%}\")\n",
    "    \n",
    "    # 4. Logistic Regression (Bonus)\n",
    "    print(\"\\nü§ñ Testing Logistic Regression on PCA components...\")\n",
    "    X_train, X_test, y_train, y_test = train_test_split(\n",
    "        X_pca, y, test_size=0.2, random_state=42\n",
    "    )\n",
    "    \n",
    "    lr = LogisticRegression(random_state=42)\n",
    "    lr.fit(X_train, y_train)\n",
    "    y_pred = lr.predict(X_test)\n",
    "    \n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    print(f\"‚úì Logistic Regression Accuracy: {accuracy:.1%}\")\n",
    "    \n",
    "    # 5. Simple Visualization\n",
    "    print(\"\\nüìà Creating visualization...\")\n",
    "    plt.figure(figsize=(12, 5))\n",
    "    \n",
    "    # PCA Plot\n",
    "    plt.subplot(1, 2, 1)\n",
    "    colors = ['red' if label == 0 else 'blue' for label in y]\n",
    "    plt.scatter(X_pca[:, 0], X_pca[:, 1], c=colors, alpha=0.6)\n",
    "    plt.xlabel(f'PC1 ({variance_explained[0]:.1%} variance)')\n",
    "    plt.ylabel(f'PC2 ({variance_explained[1]:.1%} variance)')\n",
    "    plt.title('PCA: Cancer Dataset\\n(Red=Malignant, Blue=Benign)')\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    # Variance Plot\n",
    "    plt.subplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76f0a054-44db-4441-8bfd-99a27c37dded",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
